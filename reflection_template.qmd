---
title: "STAT 331 Portfolio"
author: "Rayan Tahir"
format: html 
embed-resources: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an \_\_.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from Lab or Challenge assignments where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

-   `csv` Example 1

```{r}
#| label: wd-1-csv-1

#Lab 2, Question 1
surveys <- read_csv(here::here("Data", "surveys.csv"))

```

-   `csv` Example 2

```{r}
#| label: wd-1-csv-2
#Lab 3, Question 1
teacher_evals <- read_csv(here::here("Week 3", "teacher_evals.csv"))

```

-   `xlsx`

```{r}
#| label: wd-1-xlsx
#PA 4, Question 1
cont_region <- read_xlsx(here:here("data", "gov_spending_per_capita.xlsx"),
                      sheet = "Regional totals",
                      skip = 14) |>
  filter(Region != "World total (including Iraq)",
         Region != "World total (excluding Iraq)")
```

**WD-2: I can select necessary columns from a dataset.**

-   Example selecting specified columns

```{r}
#| label: wd-2-ex-1
suspect <- fit_cands |>
#Lab 5
  inner_join(drivers_license, by = c("license_id" = "id")) |>
  filter(str_detect(plate_number, "H42W")) |>
  inner_join(person, by = c("person_id" = "id")) |>
  select(name, plate_number, car_make, car_model)


```

-   Example removing specified columns

```{r}
#| label: wd-2-ex-2

```

-   Example selecting columns based on logical values (e.g., `starts_with()`, `ends_with()`, `contains()`, `where()`)

```{r}
#| label: wd-2-ex-3
#Lab 4, Question 7
ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-3-numeric-ex-1
#Lab 4, Question 5
median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  
  pivot_wider(
      names_from = study_year,
      values_from = median_income,
  ) |>
  rename(
    "Median Income (2008, 2018 dollars)" = '2008',
    "Median Income (2018, 2018 dollars)" = '2018'
  ) |>
  arrange(desc('Median Income(2018, 2018 dollars'))

#Revision Comment: I revised my code based on the feedback I received to better represent the data without a grouping variable and with a more informative label for my columns that accurately represented the data within it.
```

-   Numeric Example 2

```{r}
#| label: wd-3-numeric-ex-1
#Lab 5
concert_mastermind <- facebook_event_checkin |>
  filter(
    event_name == "SQL Symphony Concert", 
    ymd(date) %within% interval(ymd("2017-12-01"),               ymd("2017-12-31"))) |>
    
  count(person_id, name = "visits") |>
  filter(visits >= 3) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" =   "id")) |>
  filter(hair_color == "red", between(height, 65,    67))
```

-   Character Example 1 (any context)

```{r}
#| label: wd-3-character
concert_mastermind <- facebook_event_checkin |>
  filter(
    event_name == "SQL Symphony Concert", 
    ymd(date) %within% interval(ymd("2017-12-01"),               ymd("2017-12-31"))) |>
    
  count(person_id, name = "visits") |>
  filter(visits >= 3) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" =   "id")) |>
  filter(hair_color == "red", between(height, 65,    67))
```

-   Character Example 2 (example must use functions from **stringr**)

```{r}
#| label: wd-3-string
fit48z <- get_fit_now_member |>
  filter(membership_status == "gold",
         str_detect(id, fixed("48Z")))

fit48z_checked <- get_fit_now_check_in |>
  filter(ymd(check_in_date) == ymd("2018-01-09"))

fit_cands <- fit48z |>
  inner_join(fit48z_checked, by = c("id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id"))

```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-3-date
fit48z <- get_fit_now_member |>
  filter(membership_status == "gold",
         str_detect(id, fixed("48Z")))

fit48z_checked <- get_fit_now_check_in |>
  filter(ymd(check_in_date) == ymd("2018-01-09"))

fit_cands <- fit48z |>
  inner_join(fit48z_checked, by = c("id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id"))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

-   Numeric Example 1

```{r}
#| label: wd-4-numeric-ex-1
teacher_evals_compare <- teacher_evals |>
  filter(question_no==903) |>
  mutate(
  SET_level = if_else(SET_score_avg >= 4, "excellent", "standard"),
  sen_level = case_when(
    seniority <= 4 ~ "junior",
    seniority >= 5 & seniority <= 8 ~ "senior",
    seniority > 8 ~ "very senior",
  )
) |>
select(course_id, SET_level, sen_level)
```

-   Numeric Example 2

```{r}
#| label: wd-4-numeric-ex-2
#Challenge 4
ca_afford <- ca_childcare |>
  mutate(
    weekly_income = mhi_2018 / 52, 
    center_afford = mc_infant / weekly_income,
    family_afford = mfcc_infant / weekly_income
  )

```

-   Factor Example 1 (renaming levels)

```{r}
#| label: wd-4-factor-ex-1
#Lab 4, Question 4
ca_childcare <- ca_childcare |> 
  mutate(
    county_name = str_remove(county_name, " County"),
    region = fct_collapse(
      county_name,
    "Superior California" = superior_counties,
    "North Coast" = north_coast_counties,
    "San Francisco Bay Area" = san_fran_counties,
    "Northern San Joaquin Valley" = n_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Inland Empire" = inland_counties,
    "Los Angeles" = la_county,
    "Orange" = orange_county,
    "San Diego-Imperial" = san_diego_imperial_counties
  ))
    count(ca_childcare, region)
```

-   Factor Example 2 (reordering levels)

```{r}
#| label: wd-4-factor-ex-2
#Lab 4, Question 7
ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )
```

-   Character (example must use functions from **stringr**)

```{r}
#| label: wd-4-string
#Lab 4, Question 4
ca_childcare <- ca_childcare |> 
  mutate(
    county_name = str_remove(county_name, " County"),
    region = fct_collapse(
      county_name,
    "Superior California" = superior_counties,
    "North Coast" = north_coast_counties,
    "San Francisco Bay Area" = san_fran_counties,
    "Northern San Joaquin Valley" = n_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Inland Empire" = inland_counties,
    "Los Angeles" = la_county,
    "Orange" = orange_county,
    "San Diego-Imperial" = san_diego_imperial_counties
  ))
    count(ca_childcare, region)
```

-   Date (example must use functions from **lubridate**)

```{r}
#| label: wd-4-date
#Lab 5
crime <- crime_scene_report |>
  mutate(date = ymd(date))
  filter(city == "SQL City",
         type == "murder", 
         date == ymd("2018-01-15")) |>
  select(description)
  
  crime$description
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

-   `left_join()` Example 1

```{r}
#| label: wd-5-left-ex-1
#Lab 4, Question 3
ca_childcare <- ca_childcare |>
  left_join(tax_rev, by = c("county_name" = "entity_name", "study_year" = "year"))
```

-   `right_join()` Example 1

```{r}
#| label: wd-5-right
#Lab 4, Question 3
#Example edited to display right_join()
ca_childcare <- tax_rev |>
  right_join(ca_childcare, by = c("entity_name" = "county_name", "year" = "study_year"))

```

-   `left_join()` **or** `right_join()` Example 2

```{r}
#| label: wd-5-left-right-ex-2

```

-   `inner_join()` Example 1

```{r}
#| label: wd-5-inner-ex-1
#Lab 4, Question 2
ca_childcare <- counties |>
  inner_join(childcare_costs, by = "county_fips_code") |>
  filter(state_name == "California")
  colnames(ca_childcare)
```

-   `inner_join()` Example 2

```{r}
#| label: wd-5-inner-ex-2
#Lab 5
fit48z <- get_fit_now_member |>
  filter(membership_status == "gold",
         str_detect(id, fixed("48Z")))

fit48z_checked <- get_fit_now_check_in |>
  filter(ymd(check_in_date) == ymd("2018-01-09"))

fit_cands <- fit48z |>
  inner_join(fit48z_checked, by = c("id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id"))
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

-   `semi_join()`

```{r}
#| label: wd-6-semi
#Lab 5
#Edited to display semi_join()
fit48z <- get_fit_now_member |>
  filter(membership_status == "gold",
         str_detect(id, fixed("48Z")))

fit48z_checked <- get_fit_now_check_in |>
  filter(ymd(check_in_date) == ymd("2018-01-09"))

fit_cands <- fit48z |>
  semi_join(fit48z_checked, by = c("id" = "membership_id")) |>
  inner_join(person, by = c("person_id" = "id"))
```

-   `anti_join()`

```{r}
#| label: wd-6-anti
#Lab 5
#Edited to display anti_join
non_attendees <- person |>
  anti_join(concert_attendees, by = c("id" = "person_id"))
```

**WD-7: I can pivot dataframes from long to wide and visa versa**

-   `pivot_longer()`

```{r}
#| label: wd-7-long
#Lab 4, Question 7
accent10 <- colorRampPalette(brewer.pal(7, "Accent")) (10)

ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )
```

-   `pivot_wider()`

```{r}
#| label: wd-7-wide
#Lab 4, Question 5
median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  
  pivot_wider(
      names_from = study_year,
      values_from = median_income,
  ) |>
  rename(
    "Median Income (2008, 2018 dollars)" = '2008',
    "Median Income (2018, 2018 dollars)" = '2018'
  ) |>
  arrange(desc('Median Income(2018, 2018 dollars'))
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

The following assignments satisfy the above criteria:

-   Example 1
-   Example 2
-   Example 3
-   Example 4
-   Example 5

**R-2: I can write well documented and tidy code.**

-   Example of **ggplot2** plotting

```{r}
#| label: r-2-1
ggplot(ca_afford_long, aes(x = study_year, y = Affordability, color = Setting)) +
  stat_summary(fun = median, geom = "line", linewidth = 1.2) +
  stat_summary(fun = median, geom = "point", size = 2.2) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  labs(
  title = "Affordability of Childcare in California (2008-2018)",
  subtitle = "Median Weekly Cost as a Share of County Median Household Income",
  x = "Year",
  y = "Median Share of Weekly Income Spent on Infant Care",
  color = "Childcare Setting"
) +
theme_minimal(base_size = 11) +
theme(
  plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
  plot.subtitle= element_text(size = 12, hjust= 0.5),
  legend.position = "top"
)
```

-   Example of **dplyr** pipeline

```{r}
#| label: r-2-2
#Lab 4, Question 6
accent10 <- colorRampPalette(brewer.pal(7, "Accent")) (10)

ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )
```

-   Example of function formatting

```{r}
#| label: r-2-3
#Lab 5
crime <- crime_scene_report |>
  mutate(date = ymd(date))
  filter(city == "SQL City",
         type == "murder", 
         date == ymd("2018-01-15")) |>
  select(description)
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example (any context)

```{r}
#| label: r-3-example
#Lab 5
median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  
  pivot_wider(
      names_from = study_year,
      values_from = median_income,
  ) |>
  rename(
    "Median Income (2008, 2018 dollars)" = '2008',
    "Median Income (2018, 2018 dollars)" = '2018'
  ) |>
  arrange(desc('Median Income(2018, 2018 dollars'))
```

-   Example (function stops)

```{r}
#| label: r-3-function-stops

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

-   At least two numeric variables

```{r}
#| label: dvs-1-num
#Challenge 4
ggplot(ca_afford_long, aes(x = study_year, y = Affordability, color = Setting)) +
  stat_summary(fun = median, geom = "line", linewidth = 1.2) +
  stat_summary(fun = median, geom = "point", size = 2.2) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  labs(
  title = "Affordability of Childcare in California (2008-2018)",
  subtitle = "Median Weekly Cost as a Share of County Median Household Income",
  x = "Year",
  y = "Median Share of Weekly Income Spent on Infant Care",
  color = "Childcare Setting"
) +
theme_minimal(base_size = 11) +
theme(
  plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
  plot.subtitle= element_text(size = 12, hjust= 0.5),
  legend.position = "top"
)

```

-   At least one numeric variable and one categorical variable

```{r}
#| label: dvs-2-num-cat
#Lab 2, Question 16
ggplot(surveys, aes(x=weight, y=species))+ 
geom_boxplot(outlier.shape=NA) + 
geom_jitter(aes(color=sex), alpha = 0.2) +
  scale_fill_manual(values=c("M"="steelblue", "F" = "purple2")) +
  scale_color_manual(values=c("M" = "steelblue", "F" = "purple2"))+
labs(
  title= "Distribution of Weight by Species",
  x= "Weight (g)",
  y="Species",
  fill = "Sex",
  color = "Sex"
) + theme(axis.text.x=element_text(angle=45, hjust=1), plot.title=element_text(hjust=0.5))
```

-   At least two categorical variables

```{r}
#| label: dvs-2-cat
#Lab 4, Question 7
ggplot(data = ca_childcare_long, aes(x = study_year, y = weekly_price, color = region)) +
  geom_point(alpha = 0.8, size = 1.6) +
  geom_smooth(method = "loess", se = TRUE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1, scales = "fixed") +
  scale_x_continuous(
    breaks = seq(2008, 2018, 2),
    limits = c(2008, 2018),
  ) +
  scale_color_manual(values = accent10) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "Weekly Price",
    color = "California Region"
   ) +
  theme(
    panel.border = element_rect(color = "black", fill = NA),
  panel.grid.major = element_line(color = "gray90", linewidth = 0.4),
  panel.grid.minor = element_line(color = "gray90", linewidth = 0.3),
  panel.background = element_rect(fill = "white", color = "black"),
    axis.text.x = element_text(size = 11, angle = 0, hjust = 0.5),
    axis.title = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
  )
```

-   Dates (time series plot)

```{r}
#| label: dvs-2-date
#Lab 4, Question 6
ggplot(data = ca_childcare_long, aes(x = study_year, y = weekly_price, color = region)) +
  geom_point(alpha = 0.8, size = 1.6) +
  geom_smooth(method = "loess", se = TRUE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1, scales = "fixed") +
  scale_x_continuous(
    breaks = seq(2008, 2018, 2),
    limits = c(2008, 2018),
  ) +
  scale_color_manual(values = accent10) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "Weekly Price",
    color = "California Region"
   ) +
  theme(
    panel.border = element_rect(color = "black", fill = NA),
  panel.grid.major = element_line(color = "gray90", linewidth = 0.4),
  panel.grid.minor = element_line(color = "gray90", linewidth = 0.3),
  panel.background = element_rect(fill = "white", color = "black"),
    axis.text.x = element_text(size = 11, angle = 0, hjust = 0.5),
    axis.title = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
  )

```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   I can modify my plot theme to be more readable

```{r}
#| label: dvs-2-ex-1
#Lab 2, Question 16
ggplot(surveys, aes(x=weight, y=species))+ 
geom_boxplot(outlier.shape=NA) + 
geom_jitter(aes(color=sex), alpha = 0.2) +
  scale_fill_manual(values=c("M"="steelblue", "F" = "purple2")) +
  scale_color_manual(values=c("M" = "steelblue", "F" = "purple2"))+
labs(
  title= "Distribution of Weight by Species",
  x= "Weight (g)",
  y="Species",
  fill = "Sex",
  color = "Sex"
) + theme(axis.text.x=element_text(angle=45, hjust=1), plot.title=element_text(hjust=0.5))

```

-   I can modify my colors to be accessible to anyone's eyes

```{r}
#| label: dvs-2-ex-2
#Lab 2, Question 16
ggplot(surveys, aes(x=weight, y=species))+ 
geom_boxplot(outlier.shape=NA) + 
geom_jitter(aes(color=sex), alpha = 0.2) +
  scale_fill_manual(values=c("M"="steelblue", "F" = "purple2")) +
  scale_color_manual(values=c("M" = "steelblue", "F" = "purple2"))+
labs(
  title= "Distribution of Weight by Species",
  x= "Weight (g)",
  y="Species",
  fill = "Sex",
  color = "Sex"
) + theme(axis.text.x=element_text(angle=45, hjust=1), plot.title=element_text(hjust=0.5))
```

-   I can modify my plot titles to clearly communicate the data context

```{r}
#| label: dvs-2-ex-3
#Challenge 4
ca_afford_long <- ca_afford |>
  seplect(study_year, center_afford,          family_afford) |>
  pivot_longer(
    cols = c(center_afford, family_afford),
    names_to = "Setting",
    values_to = "Affordability"
) |>
mutate(
  Setting = recode(Setting,
                  center_afford = "Center-Based",
                   family_afford = "Family-Based")
)

ggplot(ca_afford_long, aes(x = study_year, y = Affordability, color = Setting)) +
  stat_summary(fun = median, geom = "line", linewidth = 1.2) +
  stat_summary(fun = median, geom = "point", size = 2.2) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  labs(
  title = "Affordability of Childcare in California (2008-2018)",
  subtitle = "Median Weekly Cost as a Share of County Median Household Income",
  x = "Year",
  y = "Median Share of Weekly Income Spent on Infant Care",
  color = "Childcare Setting"
) +
theme_minimal(base_size = 11) +
theme(
  plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
  plot.subtitle= element_text(size = 12, hjust= 0.5),
  legend.position = "top"
)
```

-   I can modify the text in my plot to be more readable

```{r}
#| label: dvs-2-ex-4
#Challenge 4
ca_afford_long <- ca_afford |>
  seplect(study_year, center_afford,          family_afford) |>
  pivot_longer(
    cols = c(center_afford, family_afford),
    names_to = "Setting",
    values_to = "Affordability"
) |>
mutate(
  Setting = recode(Setting,
                  center_afford = "Center-Based",
                   family_afford = "Family-Based")
)

ggplot(ca_afford_long, aes(x = study_year, y = Affordability, color = Setting)) +
  stat_summary(fun = median, geom = "line", linewidth = 1.2) +
  stat_summary(fun = median, geom = "point", size = 2.2) +
  scale_y_continuous(labels = label_percent(accuracy = 1)) + 
  labs(
  title = "Affordability of Childcare in California (2008-2018)",
  subtitle = "Median Weekly Cost as a Share of County Median Household Income",
  x = "Year",
  y = "Median Share of Weekly Income Spent on Infant Care",
  color = "Childcare Setting"
) +
theme_minimal(base_size = 11) +
theme(
  plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
  plot.subtitle= element_text(size = 12, hjust= 0.5),
  legend.position = "top"
)
```

-   I can reorder my legend to align with the colors in my plot

```{r}
#| label: dvs-2-ex-5
#Lab 4, Question 7
accent10 <- colorRampPalette(brewer.pal(7, "Accent")) (10)

ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )

ggplot(ca_childcare_long, aes(x = study_year, y = weekly_price, color = region)) +
  geom_point(alpha = 0.8, size = 1.6) +
  geom_smooth(method = "loess", se = TRUE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1, scales = "fixed") +
  scale_x_continuous(
    breaks = seq(2008, 2018, 2),
    limits = c(2008, 2018),
  ) +
  scale_color_manual(values = accent10) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "Weekly Price",
    color = "California Region"
   ) +
  theme(
    panel.border = element_rect(color = "black", fill = NA),
  panel.grid.major = element_line(color = "gray90", linewidth = 0.4),
  panel.grid.minor = element_line(color = "gray90", linewidth = 0.3),
  panel.background = element_rect(fill = "white", color = "black"),
    axis.text.x = element_text(size = 11, angle = 0, hjust = 0.5),
    axis.title = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
  )
```

**DVS-3: I show creativity in my visualizations**

-   I can use non-standard colors (Example 1)

```{r}
#| label: dvs-3-1-ex-1
#Challenge 3, Question 2
ggplot(teacher_evals_compare, aes(x=sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  labs(
    title = "Evaluation of Teachers' Use of Activities",
    x = "Years of Experience",
    y = NULL,
    fill = "Evaluation Rating"
) +
  scale_y_continuous(labels = scales::percent)+
  scale_fill_manual(values = c("excellent" = "#B796D4", "standard" = "#BA955C")) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "top",
    legend.title = element_text(size=10),
    legend.text = element_text(size=9),
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5)
)
```

-   I can use non-standard colors (Example 2)

```{r}
#| label: dvs-3-1-ex-2
#Lab 4, Question 7
accent10 <- colorRampPalette(brewer.pal(7, "Accent")) (10)

ca_childcare_long <- ca_childcare |>
  select(region, study_year, mc_infant, mc_toddler, mc_preschool) |>
  pivot_longer(
    cols = starts_with("mc_"),
    names_to = "age_group",
    values_to = "weekly_price"
  ) |>
  mutate(
    age_group = case_match(age_group,
                       "mc_infant" ~ "Infant",
                       "mc_toddler" ~ "Toddler",
                       "mc_preschool" ~ "Preschool"),
    age_group = factor(age_group, levels = c("Infant", "Toddler", "Preschool")),
    region = fct_reorder2(region, study_year, weekly_price)
  )

ggplot(ca_childcare_long, aes(x = study_year, y = weekly_price, color = region)) +
  geom_point(alpha = 0.8, size = 1.6) +
  geom_smooth(method = "loess", se = TRUE, linewidth = 1) +
  facet_wrap(~ age_group, nrow = 1, scales = "fixed") +
  scale_x_continuous(
    breaks = seq(2008, 2018, 2),
    limits = c(2008, 2018),
  ) +
  scale_color_manual(values = accent10) +
  labs(
    title = "Weekly Median Price for Center-Based Childcare ($)",
    x = "Study Year",
    y = "Weekly Price",
    color = "California Region"
   ) +
  theme(
    panel.border = element_rect(color = "black", fill = NA),
  panel.grid.major = element_line(color = "gray90", linewidth = 0.4),
  panel.grid.minor = element_line(color = "gray90", linewidth = 0.3),
  panel.background = element_rect(fill = "white", color = "black"),
    axis.text.x = element_text(size = 11, angle = 0, hjust = 0.5),
    axis.title = element_text(size = 12),
    plot.title = element_text(face = "bold", size = 15, hjust = 0.5),
    legend.position = "right",
    legend.title = element_text(size = 12),
    legend.text = element_text(size = 10),
  )
```

-   I can use annotations (e.g., `geom_text()`)

```{r}
#| label: dvs-3-2

```

-   I can choose creative geometries (e.g., `geom_segment()`, `geom_ribbon)()`)

```{r}
#| label: dvs-3-3

```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example using `summarize()`

```{r}
#| label: dvs-4-summarize
#Lab 3, Question 10
teacher_evals_clean |>
  filter(question_no == 901) |>
  group_by(teacher_id) |>
  summarize(
    avg_q1 = mean(SET_score_avg, na.rm = TRUE),
    n_courses = n_distinct(course_id), 
    .groups = "drop"
) |>
filter(n_courses >= 5) |>
filter(avg_q1 %in% c(max(avg_q1), min(avg_q1))) |>
kable(caption = "Instructors with the lowest and highest average Q1 ratings with 5 or more courses")
```

-   Example using `across()`

```{r}
#| label: dvs-4-across
#Lab 3, Question 10
#Modified response to utilize across()
teacher_evals_clean |>
  filter(question_no %in% c(901, 902, 903)) |>
  group_by(teacher_id) |>
  summarize(
    across(
      SET_score_avg,
      list(mean = ~mean(.x, na.rm = TRUE)),
      .names = "avg_{.col}_{.fn}"
    ),
    n_courses = n_distinct(course_id),
    .groups = "drop"
  )
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1

```{r}
#| label: dvs-5-1
#Lab 5
concert_mastermind <- facebook_event_checkin |>
  filter(
    event_name == "SQL Symphony Concert", 
    ymd(date) %within% interval(ymd("2017-12-01"),               ymd("2017-12-31"))) |>
  
  non_attendees <- person |>
    anti_join(concert_attendees, by = c("id" = "person_id"))
    
  count(person_id, name = "visits") |>
  filter(visits >= 3) |>
  inner_join(person, by = c("person_id" = "id")) |>
  inner_join(drivers_license, by = c("license_id" =   "id")) |>
  filter(hair_color == "red", between(height, 65,    67))

```

-   Example 2

```{r}
#| label: dvs-5-2
#Lab 3, Question 9
teacher_evals_clean |>
  group_by(teacher_id, course_id) |>
  summarize(n_questions = n_distinct(question_no), .groups = "drop") |>
  filter(n_questions == 9) |>
  nrow()
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   I can modify my column names to clearly communicate the data context

```{r}
#| label: dvs-6-ex-1
#Lab 4, Question 5
median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  
  pivot_wider(
      names_from = study_year,
      values_from = median_income,
  ) |>
  rename(
    "Median Income (2008, 2018 dollars)" = '2008',
    "Median Income (2018, 2018 dollars)" = '2018'
  ) |>
  arrange(desc('Median Income(2018, 2018 dollars'))
```

-   I can modify the text in my table to be more readable (e.g., bold face for column headers)

```{r}
#| label: dvs-6-ex-2
#Lab 3, Question 12
teacher_evals_clean |>
  filter(academic_degree == "dr" | academic_degree == "prof")|>
  group_by(teacher_id, seniority, sex) |>
  summarize(
    avg_response = mean(resp_share, na.rm = TRUE),
    n_courses = n_distinct(course_id),
    .groups = "drop"
    ) |>
filter(avg_response %in% c(max(avg_response), min(avg_response))) |>
kable(caption = "Lowest and highest average of % of students responding for Doctorate or Professor instructors")

```

-   I can arrange my table to have an intuitive ordering

```{r}
#| label: dvs-6-ex-3
#Lab 3, Question 7
teacher_evals_clean |>
  distinct(teacher_id, .keep_all = TRUE)|>
  group_by(academic_degree, sex) |>
  summarize(
    n=n(),
    seniority_min=min(seniority,na.rm = TRUE),
    seniority_max = max(seniority, na.rm = TRUE),
    seniority_mean = mean(seniority, na.rm = TRUE),
    .groups = "drop"
) |>
kable(caption = "Instructor counts by degree and sex")

```

**DVS-7: I show creativity in my tables.**

-   I can use non-default colors

```{r}
#| label: dvs-7-ex-1
ggplot(teacher_evals_compare, aes(x=sen_level, fill = SET_level)) +
  geom_bar(position = "fill") +
  labs(
    title = "Evaluation of Teachers' Use of Activities",
    x = "Years of Experience",
    y = NULL,
    fill = "Evaluation Rating"
) +
  scale_y_continuous(labels = scales::percent)+
  scale_fill_manual(values = c("excellent" = "#B796D4", "standard" = "#BA955C")) +
  theme_minimal(base_size = 11) +
  theme(
    legend.position = "top",
    legend.title = element_text(size=10),
    legend.text = element_text(size=9),
    panel.border = element_rect(colour = "black", fill = NA, linewidth = 0.5)
)
```

-   I can modify the layout of my table to be more readable (e.g., `pivot_longer()` or `pivot_wider()`)

```{r}
#| label: dvs-7-ex-2
#Lab 4, Question 5
median_income_by_region <- ca_childcare |>
  filter(study_year %in% c(2008,2018)) |>
  group_by(region, study_year) |>
  summarize(
    median_income = median(mhi_2018, na.rm = TRUE),
    .groups = "drop"
  ) |>
  
  pivot_wider(
      names_from = study_year,
      values_from = median_income,
  ) |>
  rename(
    "Median Income (2008, 2018 dollars)" = '2008',
    "Median Income (2018, 2018 dollars)" = '2018'
  ) |>
  arrange(desc('Median Income(2018, 2018 dollars')
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

-   using a single function call with multiple inputs (rather than multiple function calls)

```{r}
#| label: pe-1-one-call
ca_childcare <- ca_childcare |> 
  mutate(
    county_name = str_remove(county_name, " County"),
    region = fct_collapse(
      county_name,
    "Superior California" = superior_counties,
    "North Coast" = north_coast_counties,
    "San Francisco Bay Area" = san_fran_counties,
    "Northern San Joaquin Valley" = n_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Central Coast" = central_coast_counties,
    "Southern San Joaquin Valley" = s_san_joaquin_counties,
    "Inland Empire" = inland_counties,
    "Los Angeles" = la_county,
    "Orange" = orange_county,
    "San Diego-Imperial" = san_diego_imperial_counties
  ))
    count(ca_childcare, region)
 
#Reflection: Instead of calling the mutate() function twice, I made my code more efficient so that it's only called once.
```

-   using `across()`

```{r}
#| label: pe-1-across

```

-   using functions from the `map()` family

```{r}
#| label: pe-1-map-1

```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1: Function that operates on vectors

```{r}
#| label: pe-2-1

```

-   Example 2: Function that operates on data frames

```{r}
#| label: pe-2-2

```

-   Example 3: Function that operates on vectors *or* data frames

```{r}
#| label: pe-2-3

```

**PE-3:I can use iteration to reduce repetition in my code.**

-   using `across()`

```{r}
#| label: pe-3-across

```

-   using a `map()` function with **one** input (e.g., `map()`, `map_chr()`, `map_dbl()`, etc.)

```{r}
#| label: pe-3-map-1

```

-   using a `map()` function with **more than one** input (e.g., `map_2()` or `pmap()`)

```{r}
#| label: pe-3-map-2

```

**PE-4: I can use modern tools when carrying out my analysis.**

-   I can use functions which are not superseded or deprecated

```{r}
#| label: pe-4-1

```

-   I can connect a data wrangling pipeline into a `ggplot()`

```{r}
#| label: pe-4-2

```

## Data Simulation & Statisical Models

**DSSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1

```{r}
#| label: dsm-1-1

```

-   Example 2

```{r}
#| label: dsm-1-2

```

**DSSM-2: I can conduct common statistical analyses in R.**

-   Example 1

```{r}
#| label: dsm-2-1

```

-   Example 2

```{r}
#| label: dsm-2-2

```

-   Example 3

```{r}
#| label: dsm-2-3

```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

<!-- For the revisions included in your Portfolio, to help me understand the nature of your revisions, please denote somehow the feedback I provided you (e.g., boldface, italics, colored text) before your revisions. -->

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

## Peer Support & Collaboration

<!-- Include an image or a description of feedback you gave that you are proud of (either in a peer review or in Discord). -->

<!-- Include a description of how you grew as a collaborator through the weekly pair programming activities.   -->
